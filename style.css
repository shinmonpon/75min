/* --- Custom Font Definition --- */
@font-face {
    font-family: 'MarlinSoftBasic';
    src: url('fonts/MarlinSoftBasic-Regular.otf') format('opentype');
    font-weight: normal; font-style: normal;
}
@font-face {
    font-family: 'MarlinSoftBasic';
    src: url('fonts/MarlinSoftBasic-RegularItalic.otf') format('opentype');
    font-weight: normal; font-style: italic;
}

:root {
    --card-bg-color: #ffffff;
    --card-text-color: #000000;
    --body-bg-color: #348751;
    --header-text-color: #FFFFFF;
    --accent-color: #006CEB;
    --qr-button-color: #2c146c;
    --time-code-color: #92e2ed;
    --text-on-accent-bg: #ffffff;
    --status-banner-bg: #2A7345; /* Specific for this ticket type */
    --separator-color: #e0e0e0;
    --label-color: #555555;
    --section-border-color: #efefef;
    --main-font: 'MarlinSoftBasic', 'Roboto', sans-serif;
    --header-height: 56px;
    --button-border-radius: 6px;
    --chevron-size: 16px;
    --ptr-threshold: 70px;
    --ptr-max-pull: 500px; /* Max visual pull distance for card/indicator */
    --ptr-indicator-height: 60px; /* Height of the indicator area */
    --ptr-gear-size: 30px;
}

body {
    margin: 0;
    font-family: var(--main-font);
    background-color: var(--body-bg-color); color: var(--card-text-color);
    overscroll-behavior-y: contain; /* Prevents pull-to-refresh on the whole browser page */
}

.fixed-header {
    position: fixed; top: 0; left: 0; width: 100%; height: var(--header-height);
    background-color: var(--body-bg-color); color: var(--header-text-color);
    display: flex; align-items: center; padding: 0 16px;
    box-sizing: border-box; z-index: 1000;
}
.fixed-header .back-arrow {
    font-family: "Font Awesome 6 Free"; /* For FA back arrow */
    font-weight: 900;
    content: "\f053";
    font-size: 20px; cursor: pointer;
    position: absolute; left: 16px; top: 50%; transform: translateY(-50%);
}
.fixed-header .header-title {
    font-size: 20px; font-weight: bold;
    text-align: center; flex-grow: 1;
}

/* --- Pull to Refresh Styles --- */
.ptr-indicator {
    position: fixed;
    top: var(--header-height); /* Position below the fixed header */
    left: 0;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    height: var(--ptr-indicator-height);
    z-index: 5; /* Below card during pull, above background */
    opacity: 0; /* Hidden by default */
    transform: scale(0.8); /* Start slightly scaled down */
    transition: opacity 0.25s ease, transform 0.25s ease; /* Smooth appearance */
    pointer-events: none; /* Don't interfere with touch events */
}
.ptr-indicator.ptr-visible {
    opacity: 1; /* Visible when pulling */
    transform: scale(1); /* Full scale when pulling */
}
.ptr-indicator .ptr-gear-img {
    width: var(--ptr-gear-size);
    height: var(--ptr-gear-size);
    object-fit: contain;
    /*
       Transition for rotation is handled by JS dynamically:
       - 'transform 0.1s linear' during touchmove for live rotation.
       - 'transform 0.3s ease-in-out' during touchend for reset animation.
    */
}
/*
   The .ptr-refreshing class and its associated ptr-spin animation are removed
   as the UI will no longer enter this distinct "refreshing" state.
   The gear rotation during pull is handled by JS, and it snaps back on release.
*/
/* --- End Pull to Refresh Styles --- */

.scroll-view {
    max-width: 560px; margin: 0 auto;
    padding: 16px;
    padding-top: var(--header-height); /* Account for fixed header */
    position: relative; /* For z-indexing and transform */
    /* Transition for the card snapping back after pull */
    transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    background-color: var(--body-bg-color);
    min-height: calc(100vh - var(--header-height));
    box-sizing: border-box;
    /* overflow-y: auto; /* This is implied or should be on mainScrollView if that's the intended scroll container */
}
.card {
    background: var(--card-bg-color); color: var(--card-text-color);
    border-radius: 8px; padding: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    display: flex; flex-direction: column; gap: 20px; z-index: 10; position: relative;
    /*
       Transition for the card movement during pull is set to 'none' in JS (ptrCardElement.style.transition = 'none';)
       and then re-applied for snap-back in JS.
       The .scroll-view's transition might be for the whole view, while the card itself is what gets transformed by ptr.
       If #mainCard is inside #mainScrollView, ensure transforms target the correct element.
       The JS targets `ptrCardElement` (which is `mainCard`).
    */
}
.asf-logo {
    width: 40px; height: auto; align-self: flex-start;
    margin-left: 20px;
    cursor: pointer;
}
.main-title-block {
    display: flex; flex-direction: column; gap: 4px;
}
.main-title { font-size: 18px; font-weight: bold; }
.sub-title {
    font-size: 13px; color: var(--label-color); line-height: 1.4;
}

.clickable-header {
    display: flex; justify-content: space-between; align-items: center;
    padding: 12px 16px; border: 1px solid var(--section-border-color);
    border-radius: var(--button-border-radius);
    background-color: #f9f9f9; cursor: pointer;
    transition: border-radius 0.3s ease-in-out;
}
.clickable-header.open {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    border-bottom-color: transparent;
}
.clickable-header .icon-text-container {
    display: flex; align-items: center; gap: 8px;
}
.clickable-header .icon-text-container span { font-weight: bold; }
.chevron-img {
    width: var(--chevron-size); height: var(--chevron-size);
    object-fit: contain; transition: transform 0.3s ease-in-out;
}
.chevron-img.open-chevron { transform: rotate(180deg); }

.collapsible-content {
    max-height: 0;
    overflow: hidden;
    background-color: #f9f9f9;
    border-left: 1px solid var(--section-border-color);
    border-right: 1px solid var(--section-border-color);
    border-bottom: 1px solid var(--section-border-color);
    border-radius: 0 0 var(--button-border-radius) var(--button-border-radius);
    transition: max-height 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55); /* Note: padding is not animatable with max-height like this */
    /* If padding is desired when open, it should be on an inner div or applied when open */
}

#validationContentArea.open-content { padding-top: 16px; } /* Applied when class is added */
.qr-code-small {
    max-width: 220px; width: auto; height: auto;
    display: block; margin: 0 auto 16px auto; border: none;
}
.text-button-link {
    background: none; border: none; color: var(--qr-button-color);
    font-weight: bold; padding: 8px 0; cursor: pointer;
    display: block; margin: 0 auto; text-align: center;
    font-size: 15px;
}
.text-button-link.underline { text-decoration: underline; }
.text-button-link.underline:hover { text-decoration: underline; }

.time-code-row {
    display: flex; justify-content: space-between; align-items: center;
    font-size: 16px; font-weight: 500;
}
.time-code-row .icon-text span { color: var(--time-code-color); }

.icon-text { display: flex; align-items: center; gap: 8px; }
img[src="validazione.png"] { width: 26px; height: 22px; object-fit: contain; vertical-align: middle;}
img[src="clock.png"] { width: 25px; height: 25px; object-fit: contain; vertical-align: middle;}
img[src="lock.png"] { width: 15px; height: 16px; object-fit: contain; vertical-align: middle;}
.loop-image-container { position: relative; width: 100%; height: 57px; overflow: hidden; }
.loop-scrolling-image {
    position: absolute; top: 0; height: 100%; width: calc(367px * 3); /* Width should be image_width * number_of_copies */
    display: flex; animation: scrollContentToRight 4s linear infinite;
}
.loop-scrolling-image img { height: 100%; width: 367px; object-fit: contain; flex-shrink: 0; }
@keyframes scrollContentToRight {
    0% { transform: translateX(-367px); } /* Start with one copy off-screen to the left */
    100% { transform: translateX(0px); } /* End when the first copy is fully visible */
}
/* For a seamless loop with 3 copies, if image width is W:
   container width W.
   scrolling element width 3W.
   translateX from -2W to -W, or -W to 0, etc.
   If the image is meant to scroll from right to left continuously:
   0% { transform: translateX(0); }
   100% { transform: translateX(- (width_of_one_image_copy * (number_of_copies - 1)) px); }
   The current animation implies the content is moving from left-offscreen to fill the view.
*/


.status-banner {
    background-color: var(--status-banner-bg);
    color: var(--text-on-accent-bg);
    padding: 10px 16px;
    border-radius: 6px;
    text-align: left;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.5;
    width: 100%;
    box-sizing: border-box;
    margin: 0 auto;
    display: none; /* Hidden by default */
}
.status-banner.active { display: block; } /* Shown when active */
.status-banner strong { font-weight: bold; }
.status-banner div {} /* Empty rule, can be removed if not used */

@media (max-width: 600px) {
    .status-banner {
        width: 368px; /* This makes it fixed width on small screens, consider 100% or auto */
        min-height: 52px; height: auto; display: none; /* display: none already set above */
        flex-direction: column; justify-content: center; padding: 8px 12px;
    }
    .status-banner.active { display: flex; } /* Overrides display: block for flex behavior */
}

.detail-item { display: flex; flex-direction: column; gap: 4px; font-size: 14px;}
.detail-item.emesso-il .value { font-weight: bold; }
.detail-item.row-layout { flex-direction: row; justify-content: space-between; align-items: center;}
.detail-item .label { color: var(--label-color); font-size: 13px; }
.detail-item.row-layout .label {
    font-size: 14px; font-weight: bold; color: var(--card-text-color);
}
.detail-item.row-layout .label.costo-label { font-size: 16px; }
.detail-item.row-layout .label.light,
.detail-item.row-layout .value.light-value {
    font-weight: normal; color: var(--label-color);
}
.detail-item.row-layout .value {
    color: var(--card-text-color); font-weight: 500;
}
.price-value { font-size: 22px; font-weight: bold; color: var(--card-text-color); }
.detail-item .link-value {
    color: var(--time-code-color);
    text-decoration: none; font-weight: bold;
    display: flex; align-items: center; gap: 5px; cursor: pointer;
}
.detail-item .link-value:hover { text-decoration: underline; }
.detail-item .link-value .chevron-img {
    width: var(--chevron-size); height: var(--chevron-size);
    object-fit: contain; transition: transform 0.3s ease-in-out;
}
.detail-item .link-value .chevron-img.open-chevron { transform: rotate(180deg); }

.separator { border: none; height: 1px; background-color: var(--separator-color); margin: 0; }

/* QR Modal Styles */
.modal-overlay {
    display: none; position: fixed; z-index: 1050; left: 0; top: 0;
    width: 100%; height: 100%; overflow: auto;
    justify-content: center; align-items: center;
}
#qrModal { background-color: #ffffff; } /* This might be overridden if .modal-overlay has a semi-transparent bg */
#qrModal .modal-content {
    position: relative; background-color: transparent; box-shadow: none; padding: 0;
    width: 100%; height: 100%; display: flex; flex-direction: column;
    justify-content: center; align-items: center; text-align: center;
}
#qrModal .qr-modal-image {
    max-width: 90vw; max-height: 80vh; width: auto; height: auto; object-fit: contain;
}
#qrModal .close-modal-btn {
    position:absolute; top: 20px; right: 20px; color: #333333; font-size: 35px;
    background-color: transparent; border: none; border-radius: 0; cursor: pointer; /* Ensure no default button styles */
    width: auto; height: auto; box-shadow: none; padding: 5px; z-index: 10; /* Ensure it's above image */
}
#qrModal .close-modal-btn:hover { color: #000000; }

#dettagliContent {
    background-color: transparent; border: none; border-radius: 0;
    padding: 0; font-size: 14px; color: var(--card-text-color);
    max-height: 0; overflow: hidden;
    transition: max-height 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55),
                padding-top 0.3s ease-out 0.1s; /* Animate padding-top after max-height starts */
}
#dettagliContent.open-content { padding-top: 10px; } /* Applied when class is added */
#dettagliContent p { margin: 5px 0; font-weight: normal; }